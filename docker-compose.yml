version: "3.9"

name: web-ai-evolving

services:
  db:
    image: pgvector/pgvector:pg16
    environment:
      POSTGRES_DB: appdb
      POSTGRES_USER: appuser
      POSTGRES_PASSWORD: apppass
    ports:
      - "5432:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U appuser -d appdb"]
      interval: 5s
      timeout: 5s
      retries: 20

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 20

  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    # Charge toutes les variables définies dans .env (dont GITHUB_TOKEN, GITHUB_REPOSITORY, etc.)
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql+psycopg://appuser:apppass@db:5432/appdb
      REDIS_URL: redis://redis:6379/0
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_MODEL: ${OPENAI_MODEL:-gpt-4o-mini}
      DATA_DIR: /app/data
      # (Optionnel mais explicite) Passe explicitement les variables critiques à l'environnement du conteneur.
      GITHUB_TOKEN: ${GITHUB_TOKEN}
      GITHUB_REPOSITORY: ${GITHUB_REPOSITORY}
      PYTHONPATH: /app
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/health', timeout=5); print('ok')"]
      interval: 5s
      timeout: 5s
      retries: 30
    # Run FastAPI app (replaces Flask wrapper once deps are installed)
    command: ["uvicorn", "backend.app.main:app", "--host", "0.0.0.0", "--port", "8000"]
    volumes:
      - app-data:/app/data

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      NEXT_PUBLIC_BACKEND_URL: http://localhost:8000
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - node_modules:/app/node_modules
    healthcheck:
      test: ["CMD", "node", "-e", "fetch('http://localhost:3000').then(r=>process.exit(r.ok?0:1)).catch(()=>process.exit(1))" ]
      interval: 10s
      timeout: 5s
      retries: 20

  worker:
    build:
      context: .
      dockerfile: backend/Dockerfile
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql+psycopg://appuser:apppass@db:5432/appdb
      REDIS_URL: redis://redis:6379/0
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_MODEL: ${OPENAI_MODEL:-gpt-4o-mini}
      GITHUB_TOKEN: ${GITHUB_TOKEN}
      GITHUB_REPOSITORY: ${GITHUB_REPOSITORY}
      PYTHONPATH: /app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["celery", "-A", "backend.app.tasks.celery_app", "worker", "-B", "--loglevel=INFO"]
    volumes:
      - app-data:/app/data

volumes:
  db-data:
  node_modules:
  app-data:
